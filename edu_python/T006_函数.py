# python 的变量命名规范，类名单词首字母大写，其他均用小写单词加下划线
# 但是如果我给其前面加一个* 那么args可以接受多个实参，并且返回一个元组，对吧？
# （**kwargs也是同理将多个关键字参数转化成一个字典返回）所以在函数的定义时： *起到的是聚合的作用。
# 函数的执行时：，**起到的是打散的作用
# 所有形参的顺序为：位置参数，*args，默认参数，**kwargs。
# 1. 全局命名空间--> 我们直接在py文件中, 函数外声明的变量都属于全局命名空间 全局命名空间 + 内置命名空间
# ​2. 局部命名空间--> 在函数中声明的变量会放在局部命名空间
# ​3. 内置命名空间--> 存放python解释器为我们提供的名字, list, tuple, str, int这些都是内置命名空间
# 这三个空间的加载顺序为：内置命名空间(程序运行伊始加载)->全局命名空间(程序运行中：从上到下加载)->局部命名空间(程序运行中：调用时才加载。
# 取值顺序与加载顺序是相反的，取值顺序满足的就近原则，从小范围到大范围一层一层的逐步引用



# 函数传参的问题
def sum1(x, y):
    print(x + y)

def sum2(*args):
    su = 0
    for i in range(len(args)):
        su += args[i]
    print(su)

def sum3(**kvargs):
    for i in kvargs:
        print(kvargs[i])


sum1(1, 2)
# 传多个参数
sum2(1, 2, 3)
# 传列表,要先解包加*
sum2(*(1, 1))
# 传多个值
sum3(a=1, b=2, c=3)
# 传字典，要先解包
sum3(**{"a": 1, "b": 2, "c": 3})


